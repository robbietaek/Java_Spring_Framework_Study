package controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;


import exception.LoginException;
import logic.User;
import logic.Mail;
import logic.ShopService;

@Controller
@RequestMapping("admin")
public class AdminController {

	@Autowired
	private ShopService service;
	
	@RequestMapping("list")
	public ModelAndView list(HttpSession session) {
		ModelAndView mav = new ModelAndView();
		List<User> user = service.userlist();
		
		try {
			for(int i = 0 ; i<user.size();i++) {
			String userid = CipherUtil.makehash(user.get(i).getUserid());
			String email = CipherUtil.decrypt(user.get(i).getEmail(), userid.substring(0,16));
			user.get(i).setEmail(email);;
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		mav.addObject("list",user);
		return mav;
	}
	
	@RequestMapping("mailForm")
	public ModelAndView mailForm(String[] idchks,HttpSession session) {
		ModelAndView mav = new ModelAndView("admin/mail");
		if(idchks ==null || idchks.length==0) {
			throw new LoginException("메일 보낼 대상자를 입력하세요","list.shop");
		}
		
		List<User> list = service.userList(idchks);
		try {
			for(int i = 0 ; i<list.size();i++) {
			String userid = CipherUtil.makehash(list.get(i).getUserid());
			String email = CipherUtil.decrypt(list.get(i).getEmail(), userid.substring(0,16));
			list.get(i).setEmail(email);;
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		mav.addObject("list",list);
		return mav;
	}
	
	@RequestMapping("mail")
	public ModelAndView mail(Mail mail, HttpSession session) {
		ModelAndView mav = new ModelAndView("/alert");
		mailSend(mail);
		mav.addObject("msg","메일 전송 완료");
		mav.addObject("url","list.shop?id?="+session.getId());
		return mav;
	}
	private final class MyAuthenticator extends Authenticator{
		private String id;
		private String pw;
		public MyAuthenticator(String id , String pw) {
			this.id = id;
			this.pw = pw;
		}
		
		@Override
		protected PasswordAuthentication getPasswordAuthentication(){
			return new PasswordAuthentication(id,pw);
		}
	}
	private void mailSend(Mail mail) {
		MyAuthenticator auth = new MyAuthenticator(mail.getNaverid(), mail.getNaverpw());
		Properties prop = new Properties();
		prop.put("mail.smtp.host", "smtp.naver.com");
		prop.put("mail.smtp.starttls.enable", "true");
		prop.put("mail.debug", "true");
		prop.put("mail.smtp.auth", "true");
		prop.put("mail.smtp.port", "465");
		prop.put("mail.smtp.user", mail.getNaverid());
		prop.put("mail.smtp.socketFactory.port", "465");
		prop.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
		prop.put("mail.smtp.socketFactory.fallback", "false");
		Session session = Session.getInstance(prop,auth);
		//하나의 메일 객체(content, 첨부파일1, 첨부파일2...)
		MimeMessage mimeMsg = new MimeMessage(session);
		try {
			mimeMsg.setFrom(new InternetAddress(mail.getNaverid()+"@naver.com"));
			List<InternetAddress> addrs = new ArrayList<InternetAddress>();
			String[] emails =mail.getRecipient().split(",");
			for(String email : emails) {
				
				/*
				 * new String(email.getBytes("utf-8"),"8859_1")) 
				 * email.getByte("utf-8") : email 문자열을 byte[]로 형태로 변경
				 * 						 	-문자열을 utf-8로 인식
				 * 8859_1 : byte[] 배열을 8859_1 인코딩방식으로 변경
				 */
				try {
					addrs.add(new InternetAddress(new String(email.getBytes("utf-8"),"8859_1")));
				}catch(UnsupportedEncodingException ue) {
					ue.printStackTrace();
				}
			}
			InternetAddress[] arr = new InternetAddress[emails.length];
			for(int i = 0 ; i<addrs.size();i++) {
				arr[i] = addrs.get(i);
			}
			mimeMsg.setSentDate(new Date());
			mimeMsg.setRecipients(Message.RecipientType.TO,arr);
			mimeMsg.setSubject(mail.getTitle());
			MimeMultipart multipart = new MimeMultipart();
			MimeBodyPart message = new MimeBodyPart();
			message.setContent(mail.getContents(),mail.getMtype());
			multipart.addBodyPart(message);
			for(MultipartFile mf : mail.getFile1()) {
				if((mf!=null)&&(!mf.isEmpty())) {
				multipart.addBodyPart(bodyPart(mf));
				}
			}
			mimeMsg.setContent(multipart);
			Transport.send(mimeMsg);
		} catch(MessagingException me) {
			me.printStackTrace();
		}
	}

	private BodyPart bodyPart(MultipartFile mf) {
		MimeBodyPart body = new MimeBodyPart();
		String orgFile = mf.getOriginalFilename();		//첨부된 파일의 이름
		String path = "d:/taek/20190812/Spring/mailupload/";	//첨부파일 경로
		File f = new File(path);
		if(!f.exists()) {
			f.mkdirs();
		}
		File f1 = new File(path+orgFile);		//첨부파일 정보
		try {
			mf.transferTo(f1);		//업로드된 파일내용을 서버의 파일로 생성하기
			body.attachFile(f1);
			body.setFileName(new String(orgFile.getBytes("UTF-8"),"8859_1"));
		}catch(Exception e) {
			e.printStackTrace();
		}
		return body;
	}
	
}
